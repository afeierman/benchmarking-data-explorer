runApp('NYCDSA /Shiny Project')
doc <- tags$html(
tags$head(
tags$title('My first page')
),
tags$body(
h1('My first heading'),
p('My first paragraph, with some ',
strong('bold'),
' text.'),
div(id='myDiv', class='simpleDiv',
'Here is a div with some attributes.')
)
)
doc <- tags$html(
tags$head(
tags$title('My first page')
),
tags$body(
h1('My first heading'),
p('My first paragraph, with some ',
strong('bold'),
' text.'),
div(id='myDiv', class='simpleDiv',
'Here is a div with some attributes.')
)
)
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
dataTableOutput("table")
body <- dashboardBody(
tabItems(
tabItem(tabName = "home",
fluidRow(box(width = 15,
home))),
tabItem(tabName = "map",
tags$body(
h1('Do different neighborhoods consume energy differently?')),
fluidRow(box(
selectizeInput("city", "Select City to Display",
cities, selected = "nyc"),
selectizeInput("year", "Pick Year to Display",
2011:2015, selected = 2014),
selectizeInput("value", "Select Value to Map",
values, selected = "Observations")
)),
fluidRow(box(plotOutput("map"), height = 450))),
tabItem(tabName = "data",
fluidRow(box(dataTableOutput("table")))),
tabItem(tabName = "graph",
fluidRow(
column(width = 4,
tabBox(width = NULL,
tabPanel(h5("Filter"),
checkboxGroupInput('show_years', 'Years to Display:',
c(2011, 2012, 2013, 2014, 2015), selected = 2013),
checkboxGroupInput('show_cities', 'Cities to Display:',
c("New York City", "DC"), selected = "New York City"),
sliderInput("range", "Set axis range", min = 0, max = 1000, value = c(0, 1000))
),
tabPanel(h5("Plot"),
selectInput("xvar", "X-axis variable", plotvalues, selected = "SourceEUI"),
selectInput("yvar", "Y-axis variable", plotvalues, selected = "GovGFA")
))),
column(width = 8,
fluidRow(box(plotOutput("graph1")))))
)))
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
full_data
full_data %>%
filter(city %in% "New York City")
class(full_data %>%
filter(city %in% "New York City"))
class(full_data %>%
filter(city %in% "New York City"), Year %in% 2014)
full_data$year
full_data$Year
runApp('NYCDSA /Shiny Project')
full_data$Year
full_data$Year
class(full_data %>%
filter(city %in% "New York City"), Year %in% 2014)
class(full_data %>%
filter(city %in% "New York City"), full_data$Year %in% 2014)
class(full_data %>%
filter(city %in% "New York City", Year %in% 2014)
output$map <- renderPlot({
args <- switch(input$city,
nyc = nyc,
dc = dc)
year_select <- args[args$Year == input$year, ]
year_select$value <- year_select[[input$value]]
year_select$region <- as.character(year_select$Zip.Code)
title = paste0("New York City Benchmarking Stats by Zip Code:\n", input$value, input$axis[1])
fips = ifelse(input$city == 'nyc', nyc_fips, dc_fips)
# print the map
zip_choropleth(year_select, title=title, county_zoom=fips)
})
graph1lims <- reactive({
xlim(input$range[1], input$range[2])
})
output$graph1 <- renderPlot({
plot_check <- full_data %>%
filter(city %in% input$show_cities, Year %in% input$show_years)
ggplot(plot_check, aes(x = plot_check[input$xvar], y = plot_check[input$yvar])) +
geom_point(aes(group = Year, fill = Year)) + graph1lims() + theme_bw()
})
output$graph2 <- renderPlot({
histo <- bm_full %>%
filter(city %in% input$show_cities, Year %in% input$show_years)
ggplot(histo, aes(x = histo[input$value])) + geom_histogram(bins = 100) + xlim(0, 1000)
})
})
class(full_data %>%
filter(city %in% "New York City", Year %in% 2014)
output$map <- renderPlot({
args <- switch(input$city,
nyc = nyc,
dc = dc)
year_select <- args[args$Year == input$year, ]
year_select$value <- year_select[[input$value]]
year_select$region <- as.character(year_select$Zip.Code)
title = paste0("New York City Benchmarking Stats by Zip Code:\n", input$value, input$axis[1])
fips = ifelse(input$city == 'nyc', nyc_fips, dc_fips)
# print the map
zip_choropleth(year_select, title=title, county_zoom=fips)
class(full_data %>%
filter(city %in% "New York City", Year %in% 2014))
full_data %>%
filter(city %in% "New York City", Year %in% 2014)
full_data %>%
filter(city %in% input$data_cities, Year %in% input$data_years) %>%
formatStyle(input$selected, background="skyblue", fontWeight='bold')
full_data %>%
filter(city %in% "New York City", Year %in% 2013) %>%
formatStyle(input$selected, background="skyblue", fontWeight='bold')
full_data %>%
filter(city %in% "New York City", Year %in% 2013)
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
head(bm_full)
bm_full  $city
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
bm_full$city
bm_full %>%
filter(city in "NYC")
bm_full %>%
filter(city %in% "NYC")
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
library(dplyr)
read.csv("~/NYCDSA /Shiny Project/full_data.csv")
clean_bm <- read.csv("~/NYCDSA /Shiny Project/full_data.csv")
head(clean_bm)
max(clean_bm$ENERGY.STAR.Score)
max(clean_bm$ENERGY.STAR.Score, ignore.na = T)
clean_bm$ENERGY.STAR.Score == 101
clean_bm[clean_bm$ENERGY.STAR.Score == 101,]
clean_bm[,clean_bm$ENERGY.STAR.Score == 101]
View(clean_bm)
clean_bm <- read.csv("~/NYCDSA /Shiny Project/full_data.csv")
clean_bm
View(clean_bm)
head(clean_bm)
clean_bm$DUPROW
View(clean_bm)
sf_bm <- read.csv("~/NYCDSA /Shiny Project/San Francisco/Existing_Commercial_Buildings_Energy_Performance_Ordinance_Report_Clean.csv")
colnames(sf_bm)
clean_bm
colnames(clean_bm)
library(dplyr)
clean_bm %>%
filter(city %in% input$show_cities) %>%
group_by(Year) %>%
summarise(count = n())
clean_bm %>%
filter(city %in% "San Francisco") %>%
group_by(Year) %>%
summarise(count = n())
clean_bm <- tbl_df(read.csv("~/NYCDSA /Shiny Project/clean_bm.csv"))
clean_bm %>%
filter(city %in% "San Francisco") %>%
group_by(Year) %>%
summarise(count = n())
shiny::runApp('NYCDSA /Shiny Project')
plot1 <- clean_bm %>%
filter(city %in% input$city) %>%
group_by(Year) %>%
summarise(count = n())
plot1 <- clean_bm %>%
filter(city %in% input$city) %>%
group_by(Year) %>%
summarise(count = n())
plot1 <- clean_bm %>%
filter(city %in% "San Francisco") %>%
group_by(Year) %>%
summarise(count = n())
plot1 <- clean_bm %>%
filter(city %in% input$city) %>%
group_by(Year) %>%
summarise(count = n())
plot1 <- clean_bm %>%
filter(city %in% "San Francisco") %>%
group_by(Year) %>%
summarise(count = n())
library(dplyr)
plot1 <- clean_bm %>%
filter(city %in% "San Francisco") %>%
group_by(Year) %>%
summarise(count = n())
shiny::runApp('NYCDSA /Shiny Project')
plot1 <- clean_bm %>%
filter(city %in% "San Francisco") %>%
group_by(Year) %>%
summarise(count = n())
ggplot(plot1, aes(x = plot1$count)) + geom_histogram(stat='count') + ggtitle("Buildings Reporting by Year")
ggplot(plot1, aes(x = plot1$count)) + geom_histogram() + ggtitle("Buildings Reporting by Year")
ggplot(plot1, aes(x = plot1$count)) + geom_histogram(stat = 'identity') + ggtitle("Buildings Reporting by Year")
ggplot(plot1, aes(x = Year, y = plot1$count)) + geom_histogram(stat = 'identity') + ggtitle("Buildings Reporting by Year")
ggplot(plot1, aes(x = Year, y = plot1$count)) + geom_histogram(stat = 'identity') + ggtitle("Buildings Reporting by Year") + ylab("")
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
clean$bm
clean_bm
plot1 <- clean_bm %>%
filter(city %in% input$city) %>%
group_by(Year) %>%
summarise(count = n())
plot1 <- clean_bm %>%
filter(city %in% "New York City") %>%
group_by(Year) %>%
summarise(count = n())
ggplot(plot1, aes(x = Year, y = plot1$count)) + geom_histogram(stat='count') + ggtitle("Buildings Reporting by Year") + ylab("")
ggplot(plot1, aes(x = Year)) + geom_histogram(stat='count') + ggtitle("Buildings Reporting by Year") + ylab("")
ggplot(plot1, aes(x = Year)) + geom_histogram(stat='identity') + ggtitle("Buildings Reporting by Year") + ylab("")
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
colnames(clean_bm)
runApp('NYCDSA /Shiny Project')
clean_bm
clean_bm$Year
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
str(clean_bm)
clean_bm
str(clean_bm)
colnames(clean_bm)
head(clean_bm)
str(clean_bm)
colnames(clean_bm)
clean_bm$X <- NULL
clean_bm$city <- as.factor(clean_bm$city)
clean_bm$Zip.Code <- as.integer(clean_bm$Zip.Code)
clean_bm$Year <- as.factor(clean_bm$Year)
clean_bm$Ward <- as.factor(clean_bm$Ward)
clean_bm$Building.Name <- as.character(clean_bm$Building.Name)
clean_bm$Building.Address <- as.character(clean_bm$Building.Address)
saveRDS(clean_bm, "~/NYCDSA /Shiny Project/clean_bm.rds")
clean_bm$city
clean_bm <- tbl_df(load("~/NYCDSA /Shiny Project/clean_bm.rds"))
saveRDS(clean_bm, "~/NYCDSA /Shiny Project/clean_bm.rds")
?saveRDS
clean_bm <- tbl_df(load("~/NYCDSA /Shiny Project/clean_bm.rds"))
clean_bm <- load("~/NYCDSA /Shiny Project/clean_bm.rds")
saveRDS(clean_bm, "~/NYCDSA /Shiny Project/clean_bm.rds")
library(dplyr)
library(tidyr)
clean_bm <- tbl_df(read.csv("~/NYCDSA /Shiny Project/full_data.csv"))
sf_data <- tbl_df(read.csv("~/NYCDSA /Shiny Project/San Francisco/Existing_Commercial_Buildings_Energy_Performance_Ordinance_Report_Clean.csv"))
sf_data <- rename(sf_data, X2012.Weather.Normalized.Source.EUI..kBtu.ft2. = X2012.Weather.Normalized.Source.EUI..kBtu.sq.ft.)
sf_data$city = c("San Francisco")
sf_tidy <- sf_data %>%
gather(key, value, X2011.ENERGY.STAR.Score:X2015.Weather.Normalized.Source.EUI..kBtu.ft2., -Building.Name, -Building.Address, -Postal.Code, -Floor.Area, -Property.Type...Self.Selected) %>%
extract(key, c("Year", "Measure"), "X(201.).(.+)") %>%
spread(Measure, value) %>%
#Only take observations that have at least 1 energy data reading
filter((Weather.Normalized.Source.EUI..kBtu.ft2. > 0 | Source.EUI..kBtu.ft2. > 0 | Weather.Normalized.Site.EUI..kBtu.ft2. > 0 | Site.EUI..kBtu.ft2. > 0)) %>%
select(city, Building.Name, Building.Address, Zip.Code = Postal.Code, ReportedGFA = Floor.Area, PropType = Property.Type...Self.Selected, SiteEUI = Site.EUI..kBtu.ft2., NormSiteEUI = Weather.Normalized.Site.EUI..kBtu.ft2., SourceEUI = Source.EUI..kBtu.ft2., NormSourceEUI = Weather.Normalized.Source.EUI..kBtu.ft2., ENERGY.STAR.Score, Year)
clean_bm[] <- lapply(clean_bm, as.character)
sf_tidy[] <- lapply(sf_tidy, as.character)
clean_bm <- full_join(clean_bm, sf_tidy)
str(clean_bm)
colnames(clean_bm)
clean_bm$X <- NULL
clean_bm$city <- as.factor(clean_bm$city)
clean_bm$Zip.Code <- as.integer(clean_bm$Zip.Code)
clean_bm$Year <- as.factor(clean_bm$Year)
clean_bm$Ward <- as.factor(clean_bm$Ward)
clean_bm$Building.Name <- as.character(clean_bm$Building.Name)
clean_bm$Building.Address <- as.character(clean_bm$Building.Address)
saveRDS(clean_bm, "~/NYCDSA /Shiny Project/clean_bm.rds")
saveRDS(clean_bm, file = "~/NYCDSA /Shiny Project/clean_bm.rds")
saveRDS(clean_bm, file = "~/NYCDSA /Shiny Project/clean_bm")
?save
save(clean_bm, file = "~/NYCDSA /Shiny Project/clean_bm.rds")
save(clean_bm, file = "~/NYCDSA /Shiny Project/clean_bm.rdata")
clean_bm <- load("~/NYCDSA /Shiny Project/clean_bm.rds")
clean_bm <- load("~/NYCDSA /Shiny Project/clean_bm.rdata")
clean_bm <- load("~/NYCDSA /Shiny Project/clean_bm.rdata")
save(clean_bm, file = "mymodel.Rdata")
library(dplyr)
library(tidyr)
clean_bm <- tbl_df(read.csv("~/NYCDSA /Shiny Project/full_data.csv"))
sf_data <- tbl_df(read.csv("~/NYCDSA /Shiny Project/San Francisco/Existing_Commercial_Buildings_Energy_Performance_Ordinance_Report_Clean.csv"))
sf_data <- rename(sf_data, X2012.Weather.Normalized.Source.EUI..kBtu.ft2. = X2012.Weather.Normalized.Source.EUI..kBtu.sq.ft.)
sf_data$city = c("San Francisco")
sf_tidy <- sf_data %>%
gather(key, value, X2011.ENERGY.STAR.Score:X2015.Weather.Normalized.Source.EUI..kBtu.ft2., -Building.Name, -Building.Address, -Postal.Code, -Floor.Area, -Property.Type...Self.Selected) %>%
extract(key, c("Year", "Measure"), "X(201.).(.+)") %>%
spread(Measure, value) %>%
#Only take observations that have at least 1 energy data reading
filter((Weather.Normalized.Source.EUI..kBtu.ft2. > 0 | Source.EUI..kBtu.ft2. > 0 | Weather.Normalized.Site.EUI..kBtu.ft2. > 0 | Site.EUI..kBtu.ft2. > 0)) %>%
select(city, Building.Name, Building.Address, Zip.Code = Postal.Code, ReportedGFA = Floor.Area, PropType = Property.Type...Self.Selected, SiteEUI = Site.EUI..kBtu.ft2., NormSiteEUI = Weather.Normalized.Site.EUI..kBtu.ft2., SourceEUI = Source.EUI..kBtu.ft2., NormSourceEUI = Weather.Normalized.Source.EUI..kBtu.ft2., ENERGY.STAR.Score, Year)
clean_bm[] <- lapply(clean_bm, as.character)
sf_tidy[] <- lapply(sf_tidy, as.character)
clean_bm <- full_join(clean_bm, sf_tidy)
str(clean_bm)
colnames(clean_bm)
clean_bm$X <- NULL
clean_bm$city <- as.factor(clean_bm$city)
clean_bm$Zip.Code <- as.integer(clean_bm$Zip.Code)
clean_bm$Year <- as.factor(clean_bm$Year)
clean_bm$Ward <- as.factor(clean_bm$Ward)
clean_bm$Building.Name <- as.character(clean_bm$Building.Name)
clean_bm$Building.Address <- as.character(clean_bm$Building.Address)
str(clean_bm)
clean_bm$city <- as.factor(clean_bm$city)
clean_bm$Borough <- as.factor(clean_bm$Borough)
clean_bm$Zip.Code <- as.integer(clean_bm$Zip.Code)
clean_bm$SiteEUI <- as.numeric(clean_bm$SiteEUI)
clean_bm$NormSiteEUI <- as.numeric(clean_bm$NormSiteEUI)
clean_bm$SourceEUI <- as.numeric(clean_bm$SourceEUI)
clean_bm$NormSourceEUI <- as.numeric(clean_bm$NormSourceEUI)
clean_bm$ENERGY.STAR.Score <- as.integer(clean_bm$ENERGY.STAR.Score)
clean_bm$ReportedGFA <- as.integer(clean_bm$ReportedGFA)
clean_bm$GovGFA <- as.integer(clean_bm$GovGFA)
clean_bm$PropType <- as.factor(clean_bm$PropType)
clean_bm$Year <- as.factor(clean_bm$Year)
clean_bm$Ward <- as.factor(clean_bm$Ward)
clean_bm$Building.Name <- as.character(clean_bm$Building.Name)
clean_bm$Building.Address <- as.character(clean_bm$Building.Address)
str(clean_bm)
saveRDS(clean_bm, file = "~/NYCDSA /Shiny Project/clean_bm.rdata")
save(clean_bm, file = "mymodel.Rdata")
load("mymodel.Rdata", envir = e <- new.env())
identical(mod, e$mod, ignore.environment = TRUE)
identical(clean_bm, e$mod, ignore.environment = TRUE)
e$mod
View(clean_bm)
saveRDS(clean_bm, "clean_bm.rds")
getwd()
load("/home/andrew/mymodel.Rdata")
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
shinyServer(
library(ggthemes)
function(input, output, session){
#customize data table output
ed <- reactive({
clean_bm %>%
select(City = city, Year, "Zip Code" = Zip.Code, "Site EUI" = SiteEUI, "Source EUI" = SourceEUI, "Weather Normalized Site EUI" =NormSiteEUI, "Weather Normalized Source EUI" = NormSourceEUI, "ENERGY STAR Score" = ENERGY.STAR.Score, "Reported Floor Area" = ReportedGFA, "Property Type" = PropType)%>%
filter(City %in% input$data_cities, Year %in% input$data_years)
})
# show data using DataTable
output$table <- renderDataTable({
datatable(ed(), rownames = c(ed)) %>%
formatStyle(input$selected, background="skyblue", fontWeight='bold')
})
#choroplethr graveyard
#set map arguments
#  mapargs <- reactive({
#    args <- switch(input$city,
#                   nyc = nyc,
#                   dc = dc)
#
#    year_select <- args[args$Year == input$year, ]
#    year_select$value <- year_select[[input$value]]
#    year_select$region <- as.character(year_select$Zip.Code)
#    title = paste0(input$city, " Benchmarking Stats by Zip Code:\n", input$value)
#    fips = ifelse(input$city == 'nyc', nyc_fips, dc_fips)
#    zip_choropleth(year_select, title = title, county_zoom = fips)
#  })
#  output$map <- renderPlot({
#    # print the map
#    mapargs()
#  })
graph1lims <- reactive({
xlim(input$range[1], input$range[2])
})
output$graph1 <- renderPlot({
plot_check <- clean_bm %>%
filter(city %in% input$show_cities, Year %in% input$show_years)
ggplot(plot_check, aes(x = plot_check[input$xvar], y = plot_check[input$yvar])) +
geom_point(aes(group = Year, fill = Year)) + graph1lims() + theme
})
cityplots <- reactive({
clean_bm %>%
filter(city %in% input$cityplot)
})
citygroup <- reactive({
cityplots()%>%
group_by(Year) %>%
summarise(count = n())
})
output$city1 <- renderPlot({
ggplot(citygroup(), aes(x = Year, y = count)) + geom_histogram(stat='identity') +
ggtitle(paste0(input$cityplot, " Buildings Reporting by Year")) + ylab("")
})
output$city2 <- renderPlot({
plot2 <- clean_bm %>%
filter(city %in% input$cityplot, Year %in% input$show_years)
ggplot(plot2, aes(x = plot2$ReportedGFA, y = NormSourceEUI, fill = Year)) + geom_point() +
ggtitle("Building Size vs. Energy Use per Square Foot")
})
output$city3 <- renderPlot({
plot3 <- clean_bm %>%
filter(city %in% input$cityplot, Year %in% input$show_years)
ggplot(plot3, aes(plot3[input$num])) + geom_bar()
})
output$city4 <- renderPlot({
plot4 <- clean_bm %>%
filter(city %in% input$cityplot, Year %in% input$show_years)
ggplot(plot4, aes(plot4[input$num])) + geom_bar()
})
})
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
str(clean_bm)
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
str(clean_bm)
runApp('NYCDSA /Shiny Project')
?scale_color_brewer
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
m <- ggplot(mpg, aes(displ, hwy))
last_plot() + geom_point(aes(color = cty)) + scale_color_gradient(low = 'purple', high = 'green')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
(.packages())
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
View(clean_bm)
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
runApp('NYCDSA /Shiny Project')
